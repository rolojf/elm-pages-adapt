module Route.Temas exposing (ActionData, Data, Model, route)

import BackendTask exposing (BackendTask)
import BackendTask.Http exposing (request)
import Effect exposing (Effect)
import ErrorPage exposing (ErrorPage)
import FatalError exposing (FatalError)
import Head
import Head.Seo as Seo
import Html.Styled as Html exposing (Html)
import Html.Styled.Attributes as Attr
import MySession
import Pages.PageUrl exposing (PageUrl)
import Pages.Url
import PagesMsg exposing (PagesMsg)
import Route
import RouteBuilder exposing (App, StatefulRoute, StatelessRoute)
import Server.Request as Request
import Server.Response as Response exposing (Response)
import Server.Session as Session exposing (Session)
import Shared exposing (SharedMsg(..))
import Time
import View exposing (View)


type alias Model =
    {}


type alias RouteParams =
    {}


type alias ActionData =
    {}


type alias Msg =
    ()


route : StatefulRoute RouteParams Data ActionData {} ()
route =
    RouteBuilder.serverRender
        { head = head
        , data = data
        , action = \_ -> Request.skip ""
        }
        |> RouteBuilder.buildNoState
            { view = view }


type alias Data =
    { username : String
    , requestTime : Int
    , flashMessage : Maybe String
    }


data : RouteParams -> Request.Parser (BackendTask FatalError (Response Data ErrorPage))
data routeParams =
    let
        fnPaWithSessionR : Time.Posix -> Result Session.NotLoadedReason Session -> BackendTask error ( Session, Response Data errorPage )
        fnPaWithSessionR request sessionResult =
            case sessionResult of
                Ok session2 ->
                    ( session2
                    , { username = "uno" --session2 |> Session.get "name" |> Maybe.withDefault "NONAME"
                      , requestTime = 12 -- requestTime
                      , flashMessage = Nothing --session2 |> Session.get "message"
                      }
                        |> Response.render
                    )
                        |> BackendTask.succeed

                Err _ ->
                    ( Session.empty
                    , Route.redirectTo Route.Login
                    )
                        |> BackendTask.succeed
    in
    Request.requestTime
        |> Session.withSessionResult
            MySession.registro
            fnPaWithSessionR



{- ( session
       , { username = username
         , requestTime = requestTime
         , flashMessage = flashMessage
         }
   |> Response.render
   |> Response.withHeader
       "x-greeting"
       ("hello " ++ username ++ "!")
-}


head :
    App Data ActionData RouteParams
    -> List Head.Tag
head static =
    Seo.summary
        { canonicalUrlOverride = Nothing
        , siteName = "elm-pages"
        , image =
            { url = Pages.Url.external "TODO"
            , alt = "elm-pages logo"
            , dimensions = Nothing
            , mimeType = Nothing
            }
        , description = "TODO"
        , locale = Nothing
        , title = "TODO title" -- metadata.title -- TODO
        }
        |> Seo.website


view : App data action routeParams -> Shared.Model -> View (PagesMsg ())
view app shared =
    { title = "Hello!"
    , body =
        [ Html.p [] [ Html.text "TODO" ] ]

    --  |> List.map (Html.map (\_ -> PagesMsg.fromMsg ()))
    , withMenu = View.NoMenu
    }



{- app.data.flashMessage
       |> Maybe.map (\message -> flashView (Ok message))
       |> Maybe.withDefault (Html.p [] [ Html.text "No flash" ])
   , Html.text <| "Hello " ++ app.data.username ++ "!"
   , Html.text <| "Requested page at " ++ String.fromInt (Time.posixToMillis app.data.requestTime)
   , Html.div []
       [ Html.form
           -- TODO use client-side form submission
           -- TODO should there be a helper function to easily invoke a form submission to a different route?
           [ Attr.method "post"
           , Attr.action "/logout"
           , PagesMsg.onSubmit |> Attr.fromUnstyled
           ]
           [ Html.button [] [ Html.text "Logout" ] ]
       ]
-}


flashView : Result String String -> Html Msg
flashView message =
    Html.p
        [ Attr.style "background-color" "rgb(163 251 163)"
        ]
        [ Html.text <|
            case message of
                Ok okMessage ->
                    okMessage

                Err error ->
                    "Something went wrong: " ++ error
        ]
